<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="public/style7.css">
    <title>Quadrado de Pontos</title>
</head>
<body>
    <style>
        body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: rgb(87, 132, 230);
    overflow: hidden;
}
.grid {
    display: grid;
    gap: 0;
    background: rgb(107, 150, 107);
}
.dot {
    width: 20px;
    height: 20px;
    background-color:  rgb(107, 150, 107);
    border-radius: 50%;
    transition: background-color 0.2s ease-in-out;
}
.black { background-color: black; }
.red { background-color: red; }
.blue { background-color: blue; }
.yellow { background-color: yellow; }
.green { background-color: green; }
.purple { background-color: purple; }
button {
    padding: 3px 10px;
    cursor: pointer;
    background-color: #008CBA;
    color: white;
    border: 1px solid #070707;
    border-radius: 5px;
    transition: background 0.3s;
}
button:hover {
    background-color: #005f7a;
}

.header {
    display: flex;
    gap: 5px;
    margin: 5px;
    width: 86.5vw;
    height: 20px;
    margin: 5px;
}
.header1 {
    width: 6.7vw;
    height: 20px;
}
.header2 {
    width: 15vw;
    height: 20px;
    color: white;
}
.header3 {
    width: 50vw;
    height: 20px;
    color: white;
}
.p {
    margin: 0px;
    font-size: 20px;
}
    </style>
        <div class="header">
            <div class="header1">
                <button onclick="startGame()">Iniciar Jogo</button>
            </div>
            <div class="header2">
                <p class="p">Pontua√ß√£o: <span id="score">0</span></p>
            </div>
            <div class="header3">
                <p class="p">Comandos almentar velocidade (+) diminuir velocidade (-) dire√ß√£o  (&#8592;)  (&#8593;)  (&#8595;)  (&#8594;)</p>
            </div>
        </div>
    </div cllass="caixa">
        <div class="grid" id="grid">
            <script>
                const dotSize = 20; 
                const gapSize = 3;
                const screenWidth = window.innerWidth;
                const screenHeight = window.innerHeight;
                const columns = Math.floor(screenWidth / (dotSize + gapSize));
                const rows = Math.floor(screenHeight / (dotSize + gapSize));
                const grid = document.getElementById("grid");
                const scoreElement = document.getElementById("score");

                grid.style.gridTemplateColumns = `repeat(${columns}, ${dotSize}px)`;
                grid.style.gridTemplateRows = `repeat(${rows}, ${dotSize}px)`;

                const colors = ["yellow", "green", "purple", "red"];
                const colorValues = { "yellow": 1, "green": 2, "purple": 3, "red": 0 };

                let dots = [];
                let score = 0;
                let pos = Math.floor(rows / 2) * columns + Math.floor(columns / 2);
                let direction = 1;
                let speed = 500;
                let tail = [];
                let gameOver = false;
                let redPos = -1;
                let gameStarted = false;

                for (let i = 0; i < columns * rows; i++) {
                    let dot = document.createElement("div");
                    dot.classList.add("dot");
                    if (Math.random() < 0.1) {
                        let randomColor = colors[Math.floor(Math.random() * colors.length)];
                        dot.classList.add(randomColor);
                        dot.dataset.value = colorValues[randomColor];
                    }
                    grid.appendChild(dot);
                    dots.push(dot);
                }

                function updateLights() {
                    if (gameOver) return;
                    dots.forEach(dot => dot.classList.remove("black", "blue"));
                    dots[pos].classList.add("blue");
                    if (tail.length > 0) {
                        tail.forEach(t => dots[t].classList.add("blue"));
                    }
                    dots[pos + direction]?.classList.add("black");

                    if (Math.random() < 0.1 && redPos === -1) {
                        redPos = Math.floor(Math.random() * (columns * rows));
                        dots[redPos].classList.add("red");
                    }

                    if (redPos !== -1 && pos === redPos) {
                        endGame();
                    }
                }

                document.addEventListener("keydown", (e) => {
                    if (!gameStarted) return;
                    if (e.key === "ArrowRight" && (pos + 1) % columns !== 0) direction = 1;
                    if (e.key === "ArrowLeft" && pos % columns !== 0) direction = -1;
                    if (e.key === "ArrowUp" && pos - columns >= 0) direction = -columns;
                    if (e.key === "ArrowDown" && pos + columns < columns * rows) direction = columns;
                    if (e.key === "+") speed = Math.max(10, speed - 10);
                    if (e.key === "-") speed = Math.min(500, speed + 10);
                });

                function moveLights() {
                    if (gameOver) return;
                    let newPos = pos + direction;

                    if (newPos >= 0 && newPos < columns * rows && !(direction === 1 && pos % columns === columns - 1) && !(direction === -1 && pos % columns === 0)) {
                        if (dots[newPos].classList.contains("yellow") || dots[newPos].classList.contains("green") || dots[newPos].classList.contains("purple")) {
                            let color = dots[newPos].classList[1];
                            score += colorValues[color];
                            scoreElement.textContent = score;

                            dots[newPos].classList.remove("yellow", "green", "purple");
                            dots[newPos].classList.add("blue");
                            tail.push(pos);

                            let remainingColors = dots.some(dot => dot.classList.contains("yellow") || dot.classList.contains("green") || dot.classList.contains("purple"));
                            if (!remainingColors) {
                                alert(`Vit√≥ria! Voc√™ terminou com ${score} pontos!`);
                                return;
                            }
                        }

                        if (
                            (direction === 1 && (pos % columns === columns - 1)) || // Bateu na borda direita
                            (direction === -1 && (pos % columns === 0)) || // Bateu na borda esquerda
                            (direction === -columns && pos < columns) || // Bateu no topo
                            (direction === columns && pos >= columns * (rows - 1)) // Bateu no fundo
                        ) {
                            alert("Game Over! Voc√™ atingiu a borda!");
                            location.reload(); // Recarrega a p√°gina

                        }

                        if (dots[newPos].classList.contains("red")) {
                            dots[newPos].classList.remove("red");
                            tail.push(false);
                            alert(`GameOver! Fim de jogo! üëª. Pontua√ß√£o final: ${score}`);
                            location.reload();
                        }

                        tail.push(pos);
                        if (tail.length > 2) {
                            let tailEnd = tail.shift();
                            dots[tailEnd].classList.remove("blue");
                        }

                        pos = newPos;
                    }

                    updateLights();
                    setTimeout(moveLights, speed);
                }

                function startGame() {
                    if (gameStarted) return;
                    gameStarted = true;
                    updateLights();
                    moveLights();
                }

                function endGame() {
                    gameOver = true;
                    alert(`Fim de jogo! Sua pontua√ß√£o final foi: ${score}`);
                }
            </script>
        </div>
    </div>
</body>
</html>
